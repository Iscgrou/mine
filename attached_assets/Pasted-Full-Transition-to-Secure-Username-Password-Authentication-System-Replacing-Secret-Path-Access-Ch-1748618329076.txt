Full Transition to Secure Username/Password Authentication System (Replacing Secret Path Access)

Chronos, we are making a definitive strategic decision regarding website access security for MarFanet. The current "secret path" access methodology, despite efforts, has proven to be occasionally unreliable (e.g., 403 errors) and we will now transition to a more standard and robust username/password authentication system.

Your Absolute Mandate: Systematically Decommission Secret Path Access and Implement a Flawless Username/Password Login System.

This task requires your utmost precision, attention to detail, and adherence to security best practices to prevent any errors or vulnerabilities during this critical transition.

I. Complete Decommissioning of Old "Secret Path" Access System:

    Thorough Removal:
        Action (Chronos): Identify and completely remove ALL code, server configurations (e.g., Nginx/Apache rewrite rules, location blocks), backend routing logic, and any other mechanisms related to the current "secret path" access method for both the Admin and CRM panels.
        There should be no remnants of the old system that could cause conflicts or be exploited.
    Redirection/Blocking of Old Paths:
        Action (Chronos): Ensure that any attempts to access the old secret paths now result in a standard 404 Not Found error or are redirected to the new login page (once implemented). They must no longer grant any form of access.

II. Implementation of New Secure Username/Password Login System:

    Design & Implement Login Page UI:
        Action (Chronos): Design and implement a clean, professional, and secure login page UI. This page will be the new entry point for accessing both Admin and CRM panels.
        It should include fields for "Username" and "Password."
        It should have a clear "Login" button.
        Consider basic error display for incorrect credentials.
        The design should be responsive and align with the overall MarFanet aesthetic that Vertex AI will be proposing (or use a clean, neutral design for now).
    Backend Authentication Logic (High Security Focus):
        Action (Chronos): Implement robust backend logic to handle authentication:
            Credential Verification: Securely compare submitted usernames and passwords against the defined credentials.
            Password Handling:
                CRITICAL: While you are being provided with initial plain-text passwords for setup, the system MUST NOT store these passwords in plain text. Implement industry-standard password hashing (e.g., bcrypt, Argon2) with unique salts for storing any user credentials if this system were to be expanded beyond these two static users. For these two initial static users, you might temporarily hardcode the hashed versions or have a secure configuration for them, but ensure the comparison logic uses hashed password verification.
                For now, with these two fixed users, the immediate focus is on verifying the provided plain text against a securely managed representation.
            Session Management: Upon successful authentication, create a secure user session (e.g., using secure, HTTP-only cookies, JWT tokens stored appropriately).
            Rate Limiting/Brute-Force Protection: Implement basic rate limiting on login attempts from the same IP address to mitigate brute-force attacks.
    Defined Credentials & Role-Based Routing:
        For Admin Panel Access:
            Username: mgr
            Password: m867945
            Upon successful login with these credentials, the user MUST be redirected to the Admin Panel dashboard and have full administrative privileges.
        For CRM Panel Access:
            Username: crm
            Password: c867945
            Upon successful login with these credentials, the user MUST be redirected to the CRM Panel dashboard and have ONLY CRM-specific privileges (as per our previous "Uncompromising Access Control" directives for the CRT).
    Routing Integration:
        Action (Chronos):
            All direct access attempts to internal Admin or CRM panel URLs MUST now redirect to the login page if the user is not authenticated or does not have the correct role for that panel.
            Protect all Admin and CRM routes to require successful authentication and appropriate role assignment.
    Logout Functionality:
        Action (Chronos): Implement a secure logout mechanism that invalidates the user's session and redirects them to the login page.

III. Double-Checking & System Integrity:

    Thorough Testing:
        Action (Chronos): After implementation, rigorously test:
            Successful login for both mgr and crm users, ensuring correct redirection and access levels.
            Failed login attempts with incorrect credentials.
            Attempts to access internal panel URLs without logging in (should redirect to login).
            Attempts by the crm user to access Admin-only URLs (should be blocked or redirected).
            Logout functionality.
            The complete removal of any access via the old secret paths.
    Compatibility with Existing Infrastructure:
        Action (Chronos): Ensure this new authentication system is implemented with "meticulous precision" ("دقت مضاعف") and is fully compatible with the existing MarFanet backend and frontend architecture, causing no new conflicts or regressions in other parts of the application.
    Aegis Monitoring:
        Action (Chronos): Ensure "Project Aegis" is configured to monitor login attempts (successful and failed), potential brute-force patterns, and any errors related to the new authentication system.

Final Instruction to Chronos:

"Chronos, this is a critical security and usability directive. You are to:

    Systematically and completely REMOVE all traces of the old 'secret path' access system.
    Implement a new, secure, and robust USERNAME/PASSWORD login system as specified, using the provided credentials (mgr/m867945 for Admin, crm/c867945 for CRM). Pay extreme attention to secure password handling principles (even for these initial static credentials, the verification mechanism should be sound) and session management.
    Ensure this new system flawlessly integrates with the existing application architecture and that all access controls and redirections function perfectly.
    Confirm that all old access paths are now fully inoperative.

This task requires your highest level of precision to prevent any security vulnerabilities or access disruptions. Please begin by outlining your step-by-step plan for decommissioning the old system and implementing the new username/password authentication, including how you will manage the initial credentials securely on the backend."

Key elements of this prompt:

    Clear Mandate for Replacement: Leaves no doubt that the old system is being removed.
    Specific Credentials Provided: Gives Chronos the exact usernames and passwords for initial setup.
    Emphasis on Security Best Practices: Highlights secure password handling (hashing for verification, even if input is plain for now), session management, and rate limiting.
    Role-Based Redirection: Specifies where each user type should land after login and what access they should have.
    Thorough Testing Demanded: Outlines what needs to be tested.
    "Meticulous Precision" ("دقت مضاعف"): Directly uses your phrasing to emphasize care.
    Complete Removal of Old System: Stresses that no remnants of the old system should remain.
    Aegis Integration: Includes monitoring of the new login system.
    Requests a Plan: Asks Chronos to outline its approach first.
