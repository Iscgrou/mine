Correcting JSON Parsing Logic for Invoice Import Based on Actual File Structure

Chronos, we have an urgent issue with the new JSON invoice import system. I uploaded a JSON file, and while the system reported it was "processed," it failed to extract any invoices ("پردازش کرد اما فاکتور نتونست استخراج کنه").

I have identified the root cause: the actual structure of the JSON file being generated (likely an export from PHPMyAdmin or a similar database tool) is different from the simpler array structure we initially specified for you to parse. The representative data is nested within metadata objects.

This requires an immediate and precise update to your JSON parsing logic.

I. Authoritative & COMPLETE JSON Input Data Structure (REVISED - Highlighting Nesting):

    (Chronos: The following is the ACTUAL and AUTHORITATIVE structure of the JSON files that will be uploaded. Your parsing logic MUST be updated to correctly navigate this structure to find the representative data.)

    [
      {
        "type": "header",
        "version": "5.2.2",
        "comment": "Export to JSON plugin for PHPMyAdmin"
      },
      {
        "type": "database",
        "name": "marzban"
      },
      {
        "type": "table",
        "name": "a", // This 'name' might vary, or might be consistent - clarify if needed
        "database": "marzban",
        "data": [ // <<< THIS IS THE ARRAY OF REPRESENTATIVE OBJECTS YOU NEED TO PROCESS
          {
            "admin_username": "abolfzlmb",
            "user_usernames": null,
            "total_reset_events_for_admin": null,
            "total_data_limit_gib": "0.0000",
            "total_subscriptions": "0",
            "limited_subscriptions": "0",
            "unlimited_subscriptions": "0",
            "limited_1_month": "0",
            "limited_2_month": "0",
            "limited_3_month": "0",
            "limited_4_month": "0",
            "limited_5_month": "0",
            "limited_6_month": "0",
            "limited_1_month_volume": "0.0000",
            "limited_2_month_volume": "0.0000",
            "limited_3_month_volume": "0.0000",
            "limited_4_month_volume": "0.0000",
            "limited_5_month_volume": "0.0000",
            "limited_6_month_volume": "0.0000",
            "unlimited_1_month": "0",
            "unlimited_2_month": "0",
            "unlimited_3_month": "0",
            "unlimited_4_month": "0",
            "unlimited_5_month": "0",
            "unlimited_6_month": "0"
          },
          // ... more representative objects like the one above ...
          {
            "admin_username": "almasmb",
            "user_usernames": "2mr_hadi,30mis_setayesh,...",
            // ... all other fields as previously specified for each representative ...
            "limited_1_month_volume": "239.0000",
            "unlimited_1_month": "0"
            // ... etc. ...
          }
        ]
      }
    ]

    Key Extraction Logic Updates Needed by Chronos:
        The overall JSON is an array containing a few initial metadata objects.
        Your parser MUST first find the object where "type": "table".
        Within that "table" object, it must then access the array located at the "data" key.
        The objects within this "data" array are the individual representative records, structured exactly as we previously defined them (with admin_username, limited_X_month_volume, unlimited_X_month, etc.).
        All subsequent processing (validation of representative object fields, data type parsing for volumes and counts, invoice calculation using representative profile pricing) remains the same once you have isolated these individual representative objects from the "data" array.

II. Mandate & Objectives (Reiteration with New Urgency):

    Immediately Update JSON Parsing Logic: Modify the backend system to correctly parse this nested JSON structure and extract the array of representative data from the correct path.
    Robust Error Handling for Structure: If the uploaded JSON does not contain the expected "table" object with a "data" array, or if the "data" array is missing or not an array, provide clear error messages to the admin.
    Maintain Downstream Integrity: Ensure that once the representative data is correctly extracted, it flows accurately into invoice calculation, ledger updates, and collaborator commission calculations as previously designed.
    Thorough Testing: Test with the exact JSON file format I provided (and similar ones) to ensure invoices are generated correctly and all related financial data is updated.

Final Instruction to Chronos:

"Chronos, the JSON import system reported processing a file but failed to extract invoices. The root cause is that the actual JSON file structure is a standard PHPMyAdmin export format, where the array of representative data is nested within metadata objects, specifically under a 'table' object's 'data' key. Your current parsing logic likely expects the array of representatives at the top level.

Your immediate and highest priority is to update the JSON parsing logic in the MarFanet backend to correctly navigate this nested structure, as detailed precisely in the JSON example I've provided (which is now part of this prompt under section I). You must find the object with "type": "table" and then process the array found in its "data" key.

All other field names and data types within each representative object in that 'data' array remain as per our original specification. The core invoice calculation logic (using representative profile pricing) should not need to change once you are correctly feeding it the extracted data for each representative.

Please:

    Implement this corrected parsing logic.
    Add robust error handling if this specific nested structure is not found in an uploaded file.
    Thoroughly test with a JSON file matching the provided structure to confirm invoices are now generated correctly, financial ledgers update, and collaborator commissions (if applicable) are calculated.

Report back once you have implemented and successfully tested this crucial correction to the JSON import system."